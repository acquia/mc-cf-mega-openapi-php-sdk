<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace MauticInc\MEGA\OpenAPI\Endpoint;

class LocationInstanceBrowse extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7Endpoint
{
    protected $location;

    /**
     * Fetch a list of instances on anlocationt.
     *
     * @param string $location        UUID of the location to operate on
     * @param array  $queryParameters {
     *
     *     @var int $page Page to fetch
     *     @var int $limit Limit to fetch
     * }
     */
    public function __construct(string $location, array $queryParameters = [])
    {
        $this->location = $location;
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7EndpointTrait;

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{location}'], [$this->location], '/locations/{location}/instances');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['page', 'limit']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults(['page' => 1, 'limit' => 25]);
        $optionsResolver->setAllowedTypes('page', ['int']);
        $optionsResolver->setAllowedTypes('limit', ['int']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     * @throws \MauticInc\MEGA\OpenAPI\Exception\LocationInstanceBrowseUnauthorizedException
     * @throws \MauticInc\MEGA\OpenAPI\Exception\LocationInstanceBrowseForbiddenException
     * @throws \MauticInc\MEGA\OpenAPI\Exception\LocationInstanceBrowseNotFoundException
     * @throws \MauticInc\MEGA\OpenAPI\Exception\LocationInstanceBrowseTooManyRequestsException
     *
     * @return \MauticInc\MEGA\OpenAPI\Model\ResponseArrayOfInstances|null
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        if (200 === $status && mb_strpos($contentType, 'application/json') !== false) {
            return $serializer->deserialize($body, 'MauticInc\\MEGA\\OpenAPI\\Model\\ResponseArrayOfInstances', 'json');
        }
        if (401 === $status && mb_strpos($contentType, 'application/json') !== false) {
            throw new \MauticInc\MEGA\OpenAPI\Exception\LocationInstanceBrowseUnauthorizedException($serializer->deserialize($body, 'MauticInc\\MEGA\\OpenAPI\\Model\\ResponseUnauthorized', 'json'));
        }
        if (403 === $status && mb_strpos($contentType, 'application/json') !== false) {
            throw new \MauticInc\MEGA\OpenAPI\Exception\LocationInstanceBrowseForbiddenException($serializer->deserialize($body, 'MauticInc\\MEGA\\OpenAPI\\Model\\ResponseForbidden', 'json'));
        }
        if (404 === $status && mb_strpos($contentType, 'application/json') !== false) {
            throw new \MauticInc\MEGA\OpenAPI\Exception\LocationInstanceBrowseNotFoundException($serializer->deserialize($body, 'MauticInc\\MEGA\\OpenAPI\\Model\\ResponseNotFound', 'json'));
        }
        if (429 === $status && mb_strpos($contentType, 'application/json') !== false) {
            throw new \MauticInc\MEGA\OpenAPI\Exception\LocationInstanceBrowseTooManyRequestsException($serializer->deserialize($body, 'MauticInc\\MEGA\\OpenAPI\\Model\\ResponseRateLimited', 'json'));
        }
    }
}
